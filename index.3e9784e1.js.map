{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAgB,CACpB,sBAAuB,CACrB,MAAO,UACP,QAAS,0BACT,KAAM,SACR,EACA,qBAAsB,CACpB,MAAO,UACP,QAAS,yBACT,KAAM,SACR,EACA,0BAA2B,CACzB,MAAO,UACP,QAAS,8BACT,KAAM,OACR,EACA,wBAAyB,CACvB,MAAO,UACP,QAAS,4BACT,KAAM,SACR,EACA,wBAAyB,CACvB,MAAO,UACP,QAAS,4BACT,KAAM,SACR,EACA,iBAAkB,CAChB,MAAO,aACP,QAAS,wCACT,KAAM,OACR,EACA,oBAAqB,CACnB,MAAO,gBACP,QAAS,iCACT,KAAM,OACR,EACA,sBAAuB,CACrB,MAAO,iBACP,QAAS,6BACT,KAAM,OACR,EACA,qBAAsB,CACpB,MAAO,UACP,QAAS,mCACT,KAAM,SACR,CACF,EA+CM,EAAY,SAAS,aAAa,CAAC,SACnC,EAAgB,EAAG,SAAS,gBAAgB,CAAC,aAAa,GAAG,CACjE,SAAC,CADH,EACU,OAAA,EAAG,WAAW,A,GAElB,EAAY,CAAC,EAEnB,SAAS,IACP,OAAO,SAAS,gBAAgB,CAAC,WACnC,CAoFA,SAAS,IAGP,AAFkB,IAER,OAAO,CAAC,SAAC,CAAnB,EACE,EAAI,gBAAgB,CAAC,QAAS,WAC5B,IAAM,EAAW,EAAI,SAAS,CAAC,QAAQ,CAAC,UAExC,IAAmB,OAAO,CAAC,SAAC,CAA5B,EAAkC,OAAA,EAAE,SAAS,CAAC,MAAM,CAAC,S,GAEhD,GACH,EAAI,SAAS,CAAC,GAAG,CAA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar NOTIFICATIONS = {\n    WARNING_NAME_REQUIRED: {\n        title: \"Warning\",\n        message: \"Name field is required.\",\n        type: \"warning\"\n    },\n    WARNING_AGE_REQUIRED: {\n        title: \"Warning\",\n        message: \"Age field is required.\",\n        type: \"warning\"\n    },\n    WARNING_POSITION_REQUIRED: {\n        title: \"Warning\",\n        message: \"Position field is required.\",\n        type: \"error\"\n    },\n    WARNING_SALARY_REQUIRED: {\n        title: \"Warning\",\n        message: \"Salary field is required.\",\n        type: \"warning\"\n    },\n    WARNING_OFFICE_REQUIRED: {\n        title: \"Warning\",\n        message: \"Office field is required.\",\n        type: \"warning\"\n    },\n    ERROR_SHORT_NAME: {\n        title: \"Short name\",\n        message: \"Name must be at least 4 letters long.\",\n        type: \"error\"\n    },\n    ERROR_INCORRECT_AGE: {\n        title: \"Incorrect age\",\n        message: \"Age must be between 18 and 90.\",\n        type: \"error\"\n    },\n    ERROR_NEGATIVE_SALARY: {\n        title: \"Invalid Salary\",\n        message: \"Salary cannot be negative.\",\n        type: \"error\"\n    },\n    SUCCESS_NEW_EMPLOYEE: {\n        title: \"Success\",\n        message: \"New employee added successfully.\",\n        type: \"success\"\n    }\n};\nvar inputFields = [\n    {\n        label: \"Name:\",\n        name: \"name\",\n        type: \"text\",\n        qa: \"name\"\n    },\n    {\n        label: \"Position:\",\n        name: \"position\",\n        type: \"text\",\n        qa: \"position\"\n    },\n    {\n        label: \"Office:\",\n        name: \"office\",\n        type: \"select\",\n        qa: \"office\",\n        options: [\n            \"Tokyo\",\n            \"Singapore\",\n            \"London\",\n            \"New York\",\n            \"Edinburgh\",\n            \"San Francisco\"\n        ]\n    },\n    {\n        label: \"Age:\",\n        name: \"age\",\n        type: \"number\",\n        qa: \"age\"\n    },\n    {\n        label: \"Salary:\",\n        name: \"salary\",\n        type: \"number\",\n        qa: \"salary\"\n    }\n];\n/**********************\n ****** SORTING *******\n *********************/ var tableBody = document.querySelector(\"tbody\");\nvar tableHeaders = _to_consumable_array(document.querySelectorAll(\"thead th\")).map(function(th) {\n    return th.textContent;\n});\nvar sortState = {};\nfunction getTableBodyRows() {\n    return document.querySelectorAll(\"tbody tr\");\n}\ndocument.querySelectorAll(\"thead th\").forEach(function(header) {\n    sortState[header.textContent] = \"ASC\";\n    header.addEventListener(\"click\", function(e) {\n        var tBodyRows = getTableBodyRows();\n        var headerText = e.target.textContent;\n        var mappedRows = mapData(tBodyRows, tableHeaders);\n        var sortedRows = sortData(mappedRows, headerText, sortState[headerText]);\n        for(var key in sortState)if (key === headerText) sortState[key] = sortState[key] === \"ASC\" ? \"DESC\" : \"ASC\";\n        else sortState[key] = \"ASC\";\n        tableBody.innerHTML = \"\";\n        insertSortedRows(sortedRows);\n        selectRow();\n        getTableBodyRows().forEach(makeCellsEditable);\n    });\n});\nfunction mapData(rows, headers) {\n    return _to_consumable_array(rows).map(function(row) {\n        var rowData = {};\n        _to_consumable_array(row.cells).forEach(function(cell, index) {\n            var header = headers[index];\n            rowData[header] = cell.textContent;\n        });\n        return rowData;\n    });\n}\nfunction sortData(data, header, direction) {\n    var isSalaryColumn = header === \"Salary\";\n    return data.sort(function(rowA, rowB) {\n        var valueA, valueB;\n        if (isSalaryColumn) {\n            valueA = rowA[header].replace(\"$\", \"\").replace(\",\", \"\");\n            valueB = rowB[header].replace(\"$\", \"\").replace(\",\", \"\");\n        } else {\n            valueA = rowA[header];\n            valueB = rowB[header];\n        }\n        if (direction === \"ASC\") return isSalaryColumn ? valueA - valueB : valueA.localeCompare(valueB);\n        else return isSalaryColumn ? valueB - valueA : valueB.localeCompare(valueA);\n    });\n}\nfunction insertSortedRows(data) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            var tr = document.createElement(\"tr\");\n            for(var key in row){\n                var td = document.createElement(\"td\");\n                td.textContent = row[key];\n                tr.appendChild(td);\n            }\n            tableBody.appendChild(tr);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\n/*********************\n ***** SELECT ROW ****\n ********************/ function selectRow() {\n    var tBodyRows = getTableBodyRows();\n    tBodyRows.forEach(function(row) {\n        row.addEventListener(\"click\", function() {\n            var isActive = row.classList.contains(\"active\");\n            getTableBodyRows().forEach(function(r) {\n                return r.classList.remove(\"active\");\n            });\n            if (!isActive) row.classList.add(\"active\");\n        });\n    });\n}\n/*******************\n ****** FORM *******\n ******************/ var form = document.createElement(\"form\");\nform.className = \"new-employee-form\";\nform.noValidate = true;\ninputFields.forEach(function(field) {\n    var labelText = field.label, inputName = field.name, type = field.type, qa = field.qa;\n    var label = document.createElement(\"label\");\n    label.textContent = labelText + \" \";\n    if (type === \"select\") {\n        var select = document.createElement(\"select\");\n        select.name = inputName;\n        select.setAttribute(\"data-qa\", qa);\n        select.required = true;\n        field.options.forEach(function(option) {\n            var item = document.createElement(\"option\");\n            item.value = option;\n            item.textContent = option;\n            select.appendChild(item);\n        });\n        label.appendChild(select);\n    } else {\n        var input = document.createElement(\"input\");\n        input.name = inputName;\n        input.type = type;\n        input.setAttribute(\"data-qa\", qa);\n        input.required = true;\n        label.appendChild(input);\n    }\n    form.appendChild(label);\n});\nvar submitButton = document.createElement(\"button\");\nsubmitButton.type = \"submit\";\nsubmitButton.textContent = \"Save to table\";\nsubmitButton.addEventListener(\"click\", addNewEmployee);\nform.appendChild(submitButton);\ndocument.body.appendChild(form);\n// add new employee to the table\nfunction addNewEmployee(e) {\n    e.preventDefault();\n    // Validation\n    var employeeName = form.querySelector('input[name=\"name\"]').value.trim();\n    var age = parseInt(form.querySelector('input[name=\"age\"]').value, 10);\n    var position = document.querySelector('input[name=\"position\"]').value.trim();\n    var office = document.querySelector('select[name=\"office\"]').value;\n    var salaryValue = document.querySelector('input[name=\"salary\"]').value;\n    if (!employeeName) {\n        var _NOTIFICATIONS_WARNING_NAME_REQUIRED = NOTIFICATIONS.WARNING_NAME_REQUIRED, title = _NOTIFICATIONS_WARNING_NAME_REQUIRED.title, message = _NOTIFICATIONS_WARNING_NAME_REQUIRED.message, type = _NOTIFICATIONS_WARNING_NAME_REQUIRED.type;\n        pushNotification(10, 10, title, message, type);\n        return;\n    }\n    if (!position) {\n        var _NOTIFICATIONS_WARNING_POSITION_REQUIRED = NOTIFICATIONS.WARNING_POSITION_REQUIRED, title1 = _NOTIFICATIONS_WARNING_POSITION_REQUIRED.title, message1 = _NOTIFICATIONS_WARNING_POSITION_REQUIRED.message, type1 = _NOTIFICATIONS_WARNING_POSITION_REQUIRED.type;\n        pushNotification(10, 10, title1, message1, type1);\n        return;\n    }\n    if (!office) {\n        var _NOTIFICATIONS_WARNING_OFFICE_REQUIRED = NOTIFICATIONS.WARNING_OFFICE_REQUIRED, title2 = _NOTIFICATIONS_WARNING_OFFICE_REQUIRED.title, message2 = _NOTIFICATIONS_WARNING_OFFICE_REQUIRED.message, type2 = _NOTIFICATIONS_WARNING_OFFICE_REQUIRED.type;\n        pushNotification(10, 10, title2, message2, type2);\n        return;\n    }\n    if (!age) {\n        var _NOTIFICATIONS_WARNING_AGE_REQUIRED = NOTIFICATIONS.WARNING_AGE_REQUIRED, title3 = _NOTIFICATIONS_WARNING_AGE_REQUIRED.title, message3 = _NOTIFICATIONS_WARNING_AGE_REQUIRED.message, type3 = _NOTIFICATIONS_WARNING_AGE_REQUIRED.type;\n        pushNotification(10, 10, title3, message3, type3);\n        return;\n    }\n    if (!salaryValue) {\n        var _NOTIFICATIONS_WARNING_SALARY_REQUIRED = NOTIFICATIONS.WARNING_SALARY_REQUIRED, title4 = _NOTIFICATIONS_WARNING_SALARY_REQUIRED.title, message4 = _NOTIFICATIONS_WARNING_SALARY_REQUIRED.message, type4 = _NOTIFICATIONS_WARNING_SALARY_REQUIRED.type;\n        pushNotification(10, 10, title4, message4, type4);\n        return;\n    }\n    if (employeeName.length < 4) {\n        var _NOTIFICATIONS_ERROR_SHORT_NAME = NOTIFICATIONS.ERROR_SHORT_NAME, title5 = _NOTIFICATIONS_ERROR_SHORT_NAME.title, message5 = _NOTIFICATIONS_ERROR_SHORT_NAME.message, type5 = _NOTIFICATIONS_ERROR_SHORT_NAME.type;\n        pushNotification(10, 10, title5, message5, type5);\n        return;\n    }\n    if (age < 18 || age > 90) {\n        var _NOTIFICATIONS_ERROR_INCORRECT_AGE = NOTIFICATIONS.ERROR_INCORRECT_AGE, title6 = _NOTIFICATIONS_ERROR_INCORRECT_AGE.title, message6 = _NOTIFICATIONS_ERROR_INCORRECT_AGE.message, type6 = _NOTIFICATIONS_ERROR_INCORRECT_AGE.type;\n        pushNotification(10, 10, title6, message6, type6);\n        return;\n    }\n    var salary = parseFloat(salaryValue);\n    if (salary < 0) {\n        var _NOTIFICATIONS_ERROR_NEGATIVE_SALARY = NOTIFICATIONS.ERROR_NEGATIVE_SALARY, title7 = _NOTIFICATIONS_ERROR_NEGATIVE_SALARY.title, message7 = _NOTIFICATIONS_ERROR_NEGATIVE_SALARY.message, type7 = _NOTIFICATIONS_ERROR_NEGATIVE_SALARY.type;\n        pushNotification(10, 10, title7, message7, type7);\n        return;\n    }\n    var inputs = form.querySelectorAll(\"input, select\");\n    var newRow = document.createElement(\"tr\");\n    newRow.addEventListener(\"click\", function() {\n        var isActive = newRow.classList.contains(\"active\");\n        getTableBodyRows().forEach(function(r) {\n            return r.classList.remove(\"active\");\n        });\n        if (!isActive) newRow.classList.add(\"active\");\n    });\n    inputs.forEach(function(input) {\n        var newCell = document.createElement(\"td\");\n        newCell.textContent = input.name === \"salary\" ? formatSalary(input.value) : input.value;\n        newRow.appendChild(newCell);\n    });\n    tableBody.appendChild(newRow);\n    makeCellsEditable(newRow);\n    form.reset();\n    var _NOTIFICATIONS_SUCCESS_NEW_EMPLOYEE = NOTIFICATIONS.SUCCESS_NEW_EMPLOYEE, successTitle = _NOTIFICATIONS_SUCCESS_NEW_EMPLOYEE.title, successMessage = _NOTIFICATIONS_SUCCESS_NEW_EMPLOYEE.message, successType = _NOTIFICATIONS_SUCCESS_NEW_EMPLOYEE.type;\n    pushNotification(10, 10, successTitle, successMessage, successType);\n}\nfunction formatSalary(value) {\n    return \"$\".concat(parseInt(value).toLocaleString());\n}\n// notifications\nfunction pushNotification(posTop, posRight, title, description, type) {\n    var notification = document.createElement(\"div\");\n    var titleElement = document.createElement(\"h3\");\n    var descriptionElement = document.createElement(\"p\");\n    notification.className = \"notification \".concat(type);\n    notification.setAttribute(\"data-qa\", \"notification\");\n    notification.style.top = \"\".concat(posTop, \"px\");\n    notification.style.right = \"\".concat(posRight, \"px\");\n    titleElement.className = \"title\";\n    titleElement.textContent = title;\n    descriptionElement.textContent = description;\n    notification.appendChild(titleElement);\n    notification.appendChild(descriptionElement);\n    document.body.appendChild(notification);\n    setTimeout(function() {\n        notification.remove();\n    }, 5000);\n}\n// edit\nfunction makeCellsEditable(row) {\n    row.querySelectorAll(\"td\").forEach(function(cell) {\n        cell.addEventListener(\"dblclick\", function() {\n            var initialText = cell.textContent;\n            var isSalaryCell = cell.cellIndex === 4;\n            var computedStyle = window.getComputedStyle(cell);\n            var cellWidth = parseInt(computedStyle.width, 10);\n            var input = document.createElement(\"input\");\n            cell.textContent = \"\";\n            input.type = \"text\";\n            input.className = \"cell-input\";\n            input.value = isSalaryCell ? initialText.replace(/[$,]/g, \"\") : initialText;\n            input.style.width = \"\".concat(cellWidth, \"px\");\n            input.style.boxSizing = \"border-box\";\n            cell.appendChild(input);\n            input.focus();\n            input.addEventListener(\"blur\", function() {\n                return finalizeEdit(cell, initialText, isSalaryCell);\n            });\n            input.addEventListener(\"keypress\", function(e) {\n                if (e.key === \"Enter\") finalizeEdit(cell, initialText, isSalaryCell);\n            });\n        });\n    });\n}\nfunction finalizeEdit(cell, initialText, isSalaryCell) {\n    var activeInput = cell.querySelector(\".cell-input\");\n    if (!activeInput) return;\n    var newValue = activeInput.value.trim();\n    if (cell.cellIndex === 3 && !isValidAge(activeInput.value)) newValue = initialText;\n    else if (isSalaryCell) {\n        var numericValue = parseInt(newValue, 10);\n        newValue = isNaN(numericValue) || numericValue < 0 ? initialText : \"$\".concat(numericValue.toLocaleString());\n    } else newValue = newValue || initialText;\n    cell.textContent = newValue;\n}\nfunction isValidAge(age) {\n    var ageNumber = parseInt(age, 10);\n    return /^[0-9]+$/.test(age) && ageNumber >= 18 && ageNumber <= 90;\n}\ngetTableBodyRows().forEach(makeCellsEditable);\nselectRow();\n\n//# sourceMappingURL=index.3e9784e1.js.map\n","'use strict';\n\nconst NOTIFICATIONS = {\n  WARNING_NAME_REQUIRED: {\n    title: 'Warning',\n    message: 'Name field is required.',\n    type: 'warning',\n  },\n  WARNING_AGE_REQUIRED: {\n    title: 'Warning',\n    message: 'Age field is required.',\n    type: 'warning',\n  },\n  WARNING_POSITION_REQUIRED: {\n    title: 'Warning',\n    message: 'Position field is required.',\n    type: 'error',\n  },\n  WARNING_SALARY_REQUIRED: {\n    title: 'Warning',\n    message: 'Salary field is required.',\n    type: 'warning',\n  },\n  WARNING_OFFICE_REQUIRED: {\n    title: 'Warning',\n    message: 'Office field is required.',\n    type: 'warning',\n  },\n  ERROR_SHORT_NAME: {\n    title: 'Short name',\n    message: 'Name must be at least 4 letters long.',\n    type: 'error',\n  },\n  ERROR_INCORRECT_AGE: {\n    title: 'Incorrect age',\n    message: 'Age must be between 18 and 90.',\n    type: 'error',\n  },\n  ERROR_NEGATIVE_SALARY: {\n    title: 'Invalid Salary',\n    message: 'Salary cannot be negative.',\n    type: 'error',\n  },\n  SUCCESS_NEW_EMPLOYEE: {\n    title: 'Success',\n    message: 'New employee added successfully.',\n    type: 'success',\n  },\n};\n\nconst inputFields = [\n  {\n    label: 'Name:',\n    name: 'name',\n    type: 'text',\n    qa: 'name',\n  },\n  {\n    label: 'Position:',\n    name: 'position',\n    type: 'text',\n    qa: 'position',\n  },\n  {\n    label: 'Office:',\n    name: 'office',\n    type: 'select',\n    qa: 'office',\n    options: [\n      'Tokyo',\n      'Singapore',\n      'London',\n      'New York',\n      'Edinburgh',\n      'San Francisco',\n    ],\n  },\n  {\n    label: 'Age:',\n    name: 'age',\n    type: 'number',\n    qa: 'age',\n  },\n  {\n    label: 'Salary:',\n    name: 'salary',\n    type: 'number',\n    qa: 'salary',\n  },\n];\n\n/**********************\n ****** SORTING *******\n *********************/\n\nconst tableBody = document.querySelector('tbody');\nconst tableHeaders = [...document.querySelectorAll('thead th')].map(\n  (th) => th.textContent,\n);\nconst sortState = {};\n\nfunction getTableBodyRows() {\n  return document.querySelectorAll('tbody tr');\n}\n\ndocument.querySelectorAll('thead th').forEach((header) => {\n  sortState[header.textContent] = 'ASC';\n\n  header.addEventListener('click', (e) => {\n    const tBodyRows = getTableBodyRows();\n\n    const headerText = e.target.textContent;\n    const mappedRows = mapData(tBodyRows, tableHeaders);\n    const sortedRows = sortData(mappedRows, headerText, sortState[headerText]);\n\n    for (const key in sortState) {\n      if (key === headerText) {\n        sortState[key] = sortState[key] === 'ASC' ? 'DESC' : 'ASC';\n      } else {\n        sortState[key] = 'ASC';\n      }\n    }\n\n    tableBody.innerHTML = '';\n\n    insertSortedRows(sortedRows);\n    selectRow();\n    getTableBodyRows().forEach(makeCellsEditable);\n  });\n});\n\nfunction mapData(rows, headers) {\n  return [...rows].map((row) => {\n    const rowData = {};\n\n    [...row.cells].forEach((cell, index) => {\n      const header = headers[index];\n\n      rowData[header] = cell.textContent;\n    });\n\n    return rowData;\n  });\n}\n\nfunction sortData(data, header, direction) {\n  const isSalaryColumn = header === 'Salary';\n\n  return data.sort((rowA, rowB) => {\n    let valueA, valueB;\n\n    if (isSalaryColumn) {\n      valueA = rowA[header].replace('$', '').replace(',', '');\n      valueB = rowB[header].replace('$', '').replace(',', '');\n    } else {\n      valueA = rowA[header];\n      valueB = rowB[header];\n    }\n\n    if (direction === 'ASC') {\n      return isSalaryColumn ? valueA - valueB : valueA.localeCompare(valueB);\n    } else {\n      return isSalaryColumn ? valueB - valueA : valueB.localeCompare(valueA);\n    }\n  });\n}\n\nfunction insertSortedRows(data) {\n  for (const row of data) {\n    const tr = document.createElement('tr');\n\n    for (const key in row) {\n      const td = document.createElement('td');\n\n      td.textContent = row[key];\n\n      tr.appendChild(td);\n    }\n\n    tableBody.appendChild(tr);\n  }\n}\n\n/*********************\n ***** SELECT ROW ****\n ********************/\n\nfunction selectRow() {\n  const tBodyRows = getTableBodyRows();\n\n  tBodyRows.forEach((row) => {\n    row.addEventListener('click', () => {\n      const isActive = row.classList.contains('active');\n\n      getTableBodyRows().forEach((r) => r.classList.remove('active'));\n\n      if (!isActive) {\n        row.classList.add('active');\n      }\n    });\n  });\n}\n\n/*******************\n ****** FORM *******\n ******************/\n\nconst form = document.createElement('form');\n\nform.className = 'new-employee-form';\nform.noValidate = true;\n\ninputFields.forEach((field) => {\n  const { label: labelText, name: inputName, type, qa } = field;\n\n  const label = document.createElement('label');\n\n  label.textContent = labelText + ' ';\n\n  if (type === 'select') {\n    const select = document.createElement('select');\n\n    select.name = inputName;\n    select.setAttribute('data-qa', qa);\n    select.required = true;\n\n    field.options.forEach((option) => {\n      const item = document.createElement('option');\n\n      item.value = option;\n      item.textContent = option;\n      select.appendChild(item);\n    });\n\n    label.appendChild(select);\n  } else {\n    const input = document.createElement('input');\n\n    input.name = inputName;\n    input.type = type;\n    input.setAttribute('data-qa', qa);\n    input.required = true;\n    label.appendChild(input);\n  }\n\n  form.appendChild(label);\n});\n\nconst submitButton = document.createElement('button');\n\nsubmitButton.type = 'submit';\nsubmitButton.textContent = 'Save to table';\nsubmitButton.addEventListener('click', addNewEmployee);\n\nform.appendChild(submitButton);\n\ndocument.body.appendChild(form);\n\n// add new employee to the table\nfunction addNewEmployee(e) {\n  e.preventDefault();\n\n  // Validation\n  const employeeName = form.querySelector('input[name=\"name\"]').value.trim();\n  const age = parseInt(form.querySelector('input[name=\"age\"]').value, 10);\n  const position = document\n    .querySelector('input[name=\"position\"]')\n    .value.trim();\n  const office = document.querySelector('select[name=\"office\"]').value;\n  const salaryValue = document.querySelector('input[name=\"salary\"]').value;\n\n  if (!employeeName) {\n    const { title, message, type } = NOTIFICATIONS.WARNING_NAME_REQUIRED;\n\n    pushNotification(10, 10, title, message, type);\n\n    return;\n  }\n\n  if (!position) {\n    const { title, message, type } = NOTIFICATIONS.WARNING_POSITION_REQUIRED;\n\n    pushNotification(10, 10, title, message, type);\n\n    return;\n  }\n\n  if (!office) {\n    const { title, message, type } = NOTIFICATIONS.WARNING_OFFICE_REQUIRED;\n\n    pushNotification(10, 10, title, message, type);\n\n    return;\n  }\n\n  if (!age) {\n    const { title, message, type } = NOTIFICATIONS.WARNING_AGE_REQUIRED;\n\n    pushNotification(10, 10, title, message, type);\n\n    return;\n  }\n\n  if (!salaryValue) {\n    const { title, message, type } = NOTIFICATIONS.WARNING_SALARY_REQUIRED;\n\n    pushNotification(10, 10, title, message, type);\n\n    return;\n  }\n\n  if (employeeName.length < 4) {\n    const { title, message, type } = NOTIFICATIONS.ERROR_SHORT_NAME;\n\n    pushNotification(10, 10, title, message, type);\n\n    return;\n  }\n\n  if (age < 18 || age > 90) {\n    const { title, message, type } = NOTIFICATIONS.ERROR_INCORRECT_AGE;\n\n    pushNotification(10, 10, title, message, type);\n\n    return;\n  }\n\n  const salary = parseFloat(salaryValue);\n\n  if (salary < 0) {\n    const { title, message, type } = NOTIFICATIONS.ERROR_NEGATIVE_SALARY;\n\n    pushNotification(10, 10, title, message, type);\n\n    return;\n  }\n\n  const inputs = form.querySelectorAll('input, select');\n  const newRow = document.createElement('tr');\n\n  newRow.addEventListener('click', () => {\n    const isActive = newRow.classList.contains('active');\n\n    getTableBodyRows().forEach((r) => r.classList.remove('active'));\n\n    if (!isActive) {\n      newRow.classList.add('active');\n    }\n  });\n\n  inputs.forEach((input) => {\n    const newCell = document.createElement('td');\n\n    newCell.textContent =\n      input.name === 'salary' ? formatSalary(input.value) : input.value;\n    newRow.appendChild(newCell);\n  });\n\n  tableBody.appendChild(newRow);\n  makeCellsEditable(newRow);\n  form.reset();\n\n  const {\n    title: successTitle,\n    message: successMessage,\n    type: successType,\n  } = NOTIFICATIONS.SUCCESS_NEW_EMPLOYEE;\n\n  pushNotification(10, 10, successTitle, successMessage, successType);\n}\n\nfunction formatSalary(value) {\n  return `$${parseInt(value).toLocaleString()}`;\n}\n\n// notifications\nfunction pushNotification(posTop, posRight, title, description, type) {\n  const notification = document.createElement('div');\n  const titleElement = document.createElement('h3');\n  const descriptionElement = document.createElement('p');\n\n  notification.className = `notification ${type}`;\n  notification.setAttribute('data-qa', 'notification');\n  notification.style.top = `${posTop}px`;\n  notification.style.right = `${posRight}px`;\n\n  titleElement.className = 'title';\n  titleElement.textContent = title;\n\n  descriptionElement.textContent = description;\n\n  notification.appendChild(titleElement);\n  notification.appendChild(descriptionElement);\n\n  document.body.appendChild(notification);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 5000);\n}\n\n// edit\nfunction makeCellsEditable(row) {\n  row.querySelectorAll('td').forEach((cell) => {\n    cell.addEventListener('dblclick', () => {\n      const initialText = cell.textContent;\n      const isSalaryCell = cell.cellIndex === 4;\n      const computedStyle = window.getComputedStyle(cell);\n      const cellWidth = parseInt(computedStyle.width, 10);\n\n      const input = document.createElement('input');\n\n      cell.textContent = '';\n      input.type = 'text';\n      input.className = 'cell-input';\n\n      input.value = isSalaryCell\n        ? initialText.replace(/[$,]/g, '')\n        : initialText;\n      input.style.width = `${cellWidth}px`;\n      input.style.boxSizing = 'border-box';\n\n      cell.appendChild(input);\n      input.focus();\n\n      input.addEventListener('blur', () => {\n        return finalizeEdit(cell, initialText, isSalaryCell);\n      });\n\n      input.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n          finalizeEdit(cell, initialText, isSalaryCell);\n        }\n      });\n    });\n  });\n}\n\nfunction finalizeEdit(cell, initialText, isSalaryCell) {\n  const activeInput = cell.querySelector('.cell-input');\n\n  if (!activeInput) {\n    return;\n  }\n\n  let newValue = activeInput.value.trim();\n\n  if (cell.cellIndex === 3 && !isValidAge(activeInput.value)) {\n    newValue = initialText;\n  } else if (isSalaryCell) {\n    const numericValue = parseInt(newValue, 10);\n\n    newValue =\n      isNaN(numericValue) || numericValue < 0\n        ? initialText\n        : `$${numericValue.toLocaleString()}`;\n  } else {\n    newValue = newValue || initialText;\n  }\n\n  cell.textContent = newValue;\n}\n\nfunction isValidAge(age) {\n  const ageNumber = parseInt(age, 10);\n\n  return /^[0-9]+$/.test(age) && ageNumber >= 18 && ageNumber <= 90;\n}\n\ngetTableBodyRows().forEach(makeCellsEditable);\nselectRow();\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","NOTIFICATIONS","WARNING_NAME_REQUIRED","title","message","type","WARNING_AGE_REQUIRED","WARNING_POSITION_REQUIRED","WARNING_SALARY_REQUIRED","WARNING_OFFICE_REQUIRED","ERROR_SHORT_NAME","ERROR_INCORRECT_AGE","ERROR_NEGATIVE_SALARY","SUCCESS_NEW_EMPLOYEE","tableBody","document","querySelector","tableHeaders","querySelectorAll","map","th","textContent","sortState","getTableBodyRows","selectRow","tBodyRows","forEach","row","addEventListener","isActive","classList","contains","r","remove","add","header","e","data","direction","isSalaryColumn","headerText","target","sortedRows","rowData","cells","cell","index","headers","sort","rowA","rowB","valueA","valueB","replace","localeCompare","key","innerHTML","insertSortedRows","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","value","tr","createElement","td","appendChild","err","return","makeCellsEditable","form","className","noValidate","inputFields","label","qa","options","field","labelText","inputName","select","setAttribute","required","option","item","input","submitButton","pushNotification","posTop","posRight","description","notification","titleElement","descriptionElement","concat","style","top","right","body","setTimeout","initialText","isSalaryCell","cellIndex","cellWidth","parseInt","computedStyle","window","getComputedStyle","width","boxSizing","focus","finalizeEdit","activeInput","age","ageNumber","newValue","trim","numericValue","isNaN","toLocaleString","preventDefault","employeeName","position","office","salaryValue","_NOTIFICATIONS_WARNING_NAME_REQUIRED","_NOTIFICATIONS_WARNING_POSITION_REQUIRED","_NOTIFICATIONS_WARNING_OFFICE_REQUIRED","_NOTIFICATIONS_WARNING_AGE_REQUIRED","_NOTIFICATIONS_WARNING_SALARY_REQUIRED","_NOTIFICATIONS_ERROR_SHORT_NAME","_NOTIFICATIONS_ERROR_INCORRECT_AGE","salary","parseFloat","_NOTIFICATIONS_ERROR_NEGATIVE_SALARY","inputs","newRow","newCell","reset","_NOTIFICATIONS_SUCCESS_NEW_EMPLOYEE"],"version":3,"file":"index.3e9784e1.js.map"}